<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.woonoz</groupId>
	<artifactId>pv-progdash-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>PV Progdash statistiques webservices</name>

	<prerequisites>
		<maven>3.6.0</maven>
	</prerequisites>

	<scm>
		<developerConnection>scm:git:ssh://git@bitbucket.org/FrancoisParet/java-progdash.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<properties>
		<!-- needed because of a maven bug http://stackoverflow.com/a/13228882/556469 -->
		<maven_build_timestamp>${maven.build.timestamp}</maven_build_timestamp>
		<maven.build.timestamp.format>yyyyMMddHHmm</maven.build.timestamp.format>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Sonar properties -->
		<sonar.java.source>1.8</sonar.java.source>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<sonar.projectVersion>${project.version}</sonar.projectVersion>
		<sonar.exclusions>maven/**</sonar.exclusions>

		<!-- Dependencies' version, alphabetically sorted -->
		<pv.version>10.2.0-PV-7.2.1.0</pv.version>
		<woonoz.core.version>1.1.6.1</woonoz.core.version>

		<!-- Tests with database -->

		<!-- To allow parallelized tests, database must be unique by : -->
		<!-- - thread used by Maven plugin surefire, -->
		<!-- - module during a Maven parallel build, -->
		<!-- - Jenkins executor. -->
		<test.database.suffix>-${surefire.forkNumber}</test.database.suffix>

		<!-- Tests -->
		<surefire.argLine>-Xmx512m -XX:MaxPermSize=256m</surefire.argLine>
		<failsafe.argLine>-Xmx1024m -XX:MaxPermSize=512m</failsafe.argLine>

		<!-- *********************************** -->
		<!--Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile-->
		<!--because we want to be to able to execute mvn sonar:sonar without passing a profile-->
		<!-- *********************************** -->
		<!-- Tells Sonar to use jacoco for coverage results -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<jacoco.version>0.7.6.201602180812</jacoco.version>
		<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->
		<sonar-jacoco-listeners.version>3.11</sonar-jacoco-listeners.version>
		<!-- Don't let Sonar execute tests. We will delegate it to Maven -->
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>

		<!--
			 The system property jacoco.outputDir needs to be override on the command line
			 with an absolute path if you want to merge results from all modules.
			 Example in a Jenkisn build where ${WORKSPACE} is defined and your project in the root directory of the workspace :
			 mvn clean install -Prun-its,coverage -Djacoco.outputDir=${WORKSPACE}/target
			 Note that unfortunately using the following does not work because of
			 http://jira.codehaus.org/browse/SONAR-3427:
			 <jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir>
		-->
		<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
		<!-- Jacoco output file for UTs -->
		<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Unit Tests -->
		<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>

		<sonar.junit.reportsPath>${project.build.directory}/surefire-reports</sonar.junit.reportsPath>

		<!-- Inclusions / Exclusion JaCoCo, a surcharger en fonction des projets -->
		<sonar.jacoco.ut.includes>*</sonar.jacoco.ut.includes>
		<sonar.jacoco.ut.excludes />
	</properties>

	<distributionManagement>
		<repository>
			<id>maven-releases</id>
			<name>woonoz.dev-release</name>
			<url>https://nexus.woonoz.dev/repository/maven-releases</url>
		</repository>
		<snapshotRepository>
			<id>maven-snapshots</id>
			<name>woonoz.dev-snapshots</name>
			<url>https://nexus.woonoz.dev/repository/maven-snapshots</url>
		</snapshotRepository>
	</distributionManagement>
	<repositories>
		<repository>
			<id>woonoz-public</id>
			<name>woonoz-public</name>
			<url>https://nexus.woonoz.dev/repository/woonoz-public/</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>woonoz-public</id>
			<name>woonoz-plugins-public</name>
			<url>https://nexus.woonoz.dev/repository/woonoz-public/</url>
		</pluginRepository>
	</pluginRepositories>

	<profiles>
		<profile>
			<id>coverage</id>
			<properties>
				<!-- The Jacoco agent can't -->
				<test.database.forkCount>1</test.database.forkCount>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<forkMode>once</forkMode>
							<argLine>${surefire.argLine} ${jacoco.agent.ut.arg}</argLine>
							<!-- Specific to generate mapping between tests and covered code -->
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<!--
							  Prepares a variable, jacoco.agent.ut.arg, that contains the info to be
							  passed to the JVM hosting the code being tested.
							-->
							<execution>
								<id>prepare-ut-agent</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
									<includes>
										<include>${sonar.jacoco.ut.includes}</include>
									</includes>
									<excludes>
										<exclude>${sonar.jacoco.ut.excludes}</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.sonarsource.java</groupId>
					<artifactId>sonar-jacoco-listeners</artifactId>
					<version>${sonar-jacoco-listeners.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.woonoz.core</groupId>
				<artifactId>jersey2-dependencies</artifactId>
				<version>${woonoz.core.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>com.woonoz.core</groupId>
				<artifactId>webservices-core-jersey2</artifactId>
				<version>${woonoz.core.version}</version>
			</dependency>

			<dependency>
				<groupId>com.zaxxer</groupId>
				<artifactId>HikariCP</artifactId>
				<version>3.3.1</version>
			</dependency>

			<dependency>
				<!-- Import dependency management from Spring Boot, version 1.x sera dépréciée en août 2019. A changer dès qu'on ne souhaite plus utiliser spring 4.x -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>1.5.19.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- compatible with spring 4 -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-mongodb</artifactId>
				<version>1.5.19.RELEASE</version>
			</dependency>

			<!-- compatible with spring 4 -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>1.5.19.RELEASE</version>
			</dependency>

			<!-- compatible with existing mybatis dependencies and spring 4 -->
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>1.3.3</version>
			</dependency>


			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-jersey</artifactId>
				<version>1.5.19.RELEASE</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-undertow</artifactId>
				<version>1.5.19.RELEASE</version>
			</dependency>

			<dependency>
				<groupId>com.woonoz</groupId>
				<artifactId>db-migrations</artifactId>
				<version>${pv.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.woonoz.core</groupId>
				<artifactId>services-test</artifactId>
				<version>${woonoz.core.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.woonoz.core</groupId>
				<artifactId>webservices-core-test-jersey2</artifactId>
				<version>${woonoz.core.version}</version>
				<scope>test</scope>
			</dependency>
			<!--<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId>
				<version>9.4.14.v20181114</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-util</artifactId>
				<version>9.4.14.v20181114</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-continuation</artifactId>
				<version>9.4.14.v20181114</version>
				<scope>test</scope>
			</dependency>-->
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<!-- org.apache.maven.plugins, artifactId alphabetically sorted -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.9</version>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.10.4</version>
				</plugin>
				<!-- maven release plugin -->
				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
					<configuration>
						<!-- automatically assign parent version to submodules-->
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<tagNameFormat>@{project.version}</tagNameFormat>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-scm-plugin</artifactId>
							<version>1.9.5</version>
						</dependency>
						<dependency>
							<groupId>org.apache.maven.scm</groupId>
							<artifactId>maven-scm-provider-gitexe</artifactId>
							<version>1.9.5</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.7</version>
					<executions>
						<execution>
							<goals>
								<goal>testResources</goal>
							</goals>
							<configuration>
								<includeEmptyDirs>true</includeEmptyDirs>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.4</version>
					<executions>
						<execution>
							<phase>verify</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.0</version>
					<configuration>
						<systemPropertyVariables>
							<test.database.init-auto-increments>true</test.database.init-auto-increments>
							<test.database.suffix>${test.database.suffix}</test.database.suffix>
						</systemPropertyVariables>
						<!-- Add maven directory to the classpath to configure logback with maven/logback-test.xml -->
						<additionalClasspathElements>
							<additionalClasspathElement>${user.dir}/maven</additionalClasspathElement>
						</additionalClasspathElements>
					</configuration>
				</plugin>
				<!-- Others plugins, groupId then artifactId alphabetically sorted -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.4</version>
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>create</goal>
							</goals>
							<configuration>
								<buildNumberPropertyName>scmVersion</buildNumberPropertyName>
								<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
								<revisionOnScmFailure>unknown</revisionOnScmFailure>
								<shortRevisionLength>7</shortRevisionLength><!-- use the same short revision length as Bitbucket -->
								<useLastCommittedRevision>true</useLastCommittedRevision>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
							<manifestEntries>
								<Implementation-Title>${project.version}</Implementation-Title>
								<Implementation-Version>${scmVersion}</Implementation-Version>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.5</version>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
							<manifestEntries>
								<Implementation-Title>${project.version}</Implementation-Title>
								<Implementation-Version>${scmVersion}</Implementation-Version>
							</manifestEntries>
						</archive>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>3.5.0.1254</version>
				</plugin>
				<!-- maven version plugin -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.5</version>
				</plugin>
				<!-- to package the project as a jar -->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>1.5.19.RELEASE</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
			</plugin>
			<!-- maven release plugin -->
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
			</plugin>
			<!-- maven version plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<modules>
		<module>services-api</module>
		<module>services</module>
		<module>webservices</module>
	</modules>

	<dependencies>
		<!-- Tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<groupId>pl.pragmatists</groupId>
			<artifactId>JUnitParams</artifactId>
		</dependency>
	</dependencies>

</project>